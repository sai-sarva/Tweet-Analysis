-- Tweet Node
CALL apoc.periodic.iterate(
'CALL apoc.load.json("file:///tweets_clean.json") YIELD value',
'WITH value
 MERGE (t:Tweet{id:value.id})
 ON CREATE SET t.postedTimestamp = datetime(value.postedTime), t.text = value.text, t.language = value.twitter_lang, t.retweetCount = value.retweetCount, t.favoritesCount = value.favoritesCount, t.verb = value.verb',
{batchSize:500})
YIELD * ;

-- User Node and POSTS relationship
CALL apoc.periodic.iterate(
'CALL apoc.load.json("file:///tweets_clean.json") YIELD value',
'WITH value
 MATCH (t:Tweet{id:value.id})
 MERGE (u:User{id:value.actor.id})
 ON CREATE SET u.officialName = value.actor.displayName, u.twitterName = value.actor.preferredUsername, u.userLink = value.actor.link
 MERGE (u)-[:POSTS]->(t)',
{batchSize:500})
YIELD * ;

-- Source Node and USING relationship
CALL apoc.periodic.iterate(
'CALL apoc.load.json("file:///tweets_clean.json") YIELD value',
'WITH value
 MATCH (t:Tweet{id:value.id})
 MERGE (s:Source {sourceName:value.generator.displayName})
 ON CREATE SET s.sourceLink = value.generator.link
 MERGE (t)-[:USING]->(s)',
{batchSize:500})
YIELD * ;

-- Hashtag Node and TAGS relationship
CALL apoc.periodic.iterate(
'CALL apoc.load.json("file:///tweets_clean.json") YIELD value',
'WITH value
 MATCH (t:Tweet{id:value.id})
 UNWIND value.twitter_entities.hashtags AS tag
 MERGE (h:Hashtag {hashtag:tag.text})
 MERGE (t)-[:TAGS]->(h)',
{batchSize:500})
YIELD * ;

-- Link Node and CONTAINS relationship
CALL apoc.periodic.iterate(
'CALL apoc.load.json("file:///tweets_clean.json") YIELD value',
'WITH value
 MATCH (t:Tweet{id:value.id})
 UNWIND value.twitter_entities.urls AS url
 MERGE (l:Link {link:url.expanded_url})
 MERGE (t)-[:CONTAINS]->(l)',
{batchSize:500})
YIELD * ;

-- Retweet Node and RETWEET and TAGS relationship
CALL apoc.periodic.iterate(
'CALL apoc.load.json("file:///tweets_clean.json") YIELD value',
'WITH value
 MATCH (t:Tweet{id:value.id})
 WHERE t.verb = "share"
 MERGE (rt:Retweet {id:value.object.id})
 ON CREATE SET rt.postedTime = datetime(value.object.postedTime), rt.link = value.object.link, rt.text = value.object.summary, rt.favoritesCount = value.favoritesCount
 MERGE (t)-[:RETWEET_OF]->(rt)
 WITH rt, value
 UNWIND value.object.twitter_entities.hashtags AS tag
 MERGE (h:Hashtag {hashtag:tag.text})
 MERGE (rt)-[:TAGS]->(h)',
{batchSize:500})
YIELD * ;

-- Mentioned User Node and MENTIONS relationship
CALL apoc.periodic.iterate(
'CALL apoc.load.json("file:///tweets_clean.json") YIELD value',
'WITH value
 MATCH (t:Tweet{id:value.id})
 UNWIND value.twitter_entities.user_mentions AS user
 MERGE (u:mentionedUser {id:user.id})
 ON CREATE SET u.twitterName = user.screen_name
 MERGE (t)-[:MENTIONS]->(u)',
{batchSize:500})
YIELD * ;
